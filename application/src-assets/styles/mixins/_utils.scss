// Positioning
@mixin absolute() {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
}

@mixin center-xy() {
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
}

@mixin absolute-center() {
    position: absolute;
    @include center-xy();
}

@mixin mask-triangle($top-unit, $base-unit) {
    $top: $top-unit * 1%;
    $bottom: 100% - $top;

    $base-right: $base-unit * 1%;
    $base-left: 100% - $base-right;

    clip-path: polygon(50% $top, $base-left 0, 100% 0, 100% 100%, $base-left 100%, 50% $bottom, $base-right 100%, 0 100%, 0 0, $base-right 0);
}


/// Returns the opposite direction of each direction in a list
/// @author Hugo Giraudel
/// @param {List} $directions - List of initial directions
/// @return {List} - List of opposite directions
@function opposite-direction($directions) {
    $opposite-directions: ();
    $direction-map: (
        'top':    'bottom',
        'right':  'left',
        'bottom': 'top',
        'left':   'right',
        'center': 'center',
        'ltr':    'rtl',
        'rtl':    'ltr'
    );

    @each $direction in $directions {
        $direction: to-lower-case($direction);

        @if map-has-key($direction-map, $direction) {
            $opposite-directions: append($opposite-directions, unquote(map-get($direction-map, $direction)));
        } @else {
            @warn "No opposite direction can be found for `#{$direction}`. Direction omitted.";
        }
    }

    @return $opposite-directions;
}

/// Triangle helper mixin
/// @param {Direction} $direction - Triangle direction, either `top`, `right`, `bottom` or `left`
/// @param {Color} $color [inherit] - Triangle color
/// @param {Length} $size [1em] - Triangle size
@mixin triangle($direction, $color: inherit, $size: 1em) {
    @if not index(top right bottom left, $direction) {
        @error "Direction must be either `top`, `right`, `bottom` or `left`.";
    }

    width: 0;
    height: 0;
    content: '';
    z-index: 2;
    border-#{opposite-direction($direction)}: ($size * .7) solid;
    border-#{opposite-direction($direction)}-color: $color;
    $perpendicular-borders: $size solid transparent;
    @if $direction==top or $direction==bottom {
        border-left: $perpendicular-borders;
        border-right: $perpendicular-borders;
    }
    @else if $direction==right or $direction==left {
        border-bottom: $perpendicular-borders;
        border-top: $perpendicular-borders;
    }
}

@mixin corner-triangle($size : 1rem, $color: inherit, $corner: 'top-left') {
    content: '';
    width: 0;
	height: 0;

	@if $corner == 'top-left' {
		border-top: $size solid;
		border-top-color: $color;
		border-right: $size solid transparent;
	} @else if $corner == 'top-right' {
		border-top: $size solid;
		border-top-color: $color;
		border-left: $size solid transparent;
	} @else if $corner == 'bottom-left' {
		border-right: $size solid transparent;
		border-bottom: $size solid;
		border-bottom-color: $color;
	} @else if $corner == 'bottom-right' {
		border-bottom: $size solid;
		border-bottom-color: $color;
		border-left: $size solid transparent;
    }
}
